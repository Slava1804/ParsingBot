import os
import uuid
import sqlite3
import logging
import re
import pandas as pd
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, Router
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options

load_dotenv()
router = Router()

TELEGRAM_BOT_API = os.getenv("TELEGRAM_BOT_API")
DATABASE_PATH = os.getenv("PATH_TO_DB")
UPLOAD_FOLDER = os.getenv("PATH_TO_UPLOADS")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TELEGRAM_BOT_API)
dp = Dispatcher()

def connect_db():
    return sqlite3.connect(DATABASE_PATH)

def create_table():
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS items (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT,
            url TEXT,
            xpath TEXT
        )
    ''')
    conn.commit()
    conn.close()

create_table()

@router.message(Command("start"))
async def start_handler(message: types.Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –∫–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞"""
    greeting_message = (
        "üëã <b>–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–µ–Ω —Å —Å–∞–π—Ç–æ–≤.</b>\n\n"
        "üìÑ <b>–ö–∞–∫ —è —Ä–∞–±–æ—Ç–∞—é?</b>\n"
        "–í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ <u>Excel-—Ñ–∞–π–ª</u> —Å —Ç–æ–≤–∞—Ä–∞–º–∏, –∞ —è —Å–æ–±–∏—Ä–∞—é —Ü–µ–Ω—ã —Å —Å–∞–π—Ç–æ–≤.\n\n"
        "‚úÖ <b>–ö–∞–∫–æ–π –Ω—É–∂–µ–Ω —Ñ–∞–π–ª?</b>\n"
        "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 3 –∫–æ–ª–æ–Ω–∫–∏:\n"
        "üîπ <b>title</b> ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n"
        "üîπ <b>url</b> ‚Äî —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä\n"
        "üîπ <b>xpath</b> ‚Äî –ø—É—Ç—å –∫ —Ü–µ–Ω–µ\n\n"
        "üì© <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª, –∏ —è –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—é!</b>"
    )
    
    # –°–æ–∑–¥–∞—ë–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –≤–∏–¥–∏–º—É—é –∫–Ω–æ–ø–∫—É
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª")]],
        resize_keyboard=True
    )
    
    await message.answer(greeting_message, parse_mode="HTML", reply_markup=keyboard)

@router.message(lambda message: message.text == "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª")
async def request_file(message: types.Message):
    """–°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª"""
    await message.answer("üìÅ <b>–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ Excel-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏.</b>", parse_mode="HTML")

@router.message(lambda message: message.document)
async def handle_file(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    file_id = message.document.file_id
    file_info = await bot.get_file(file_id)
    file_path = file_info.file_path
    unique_filename = os.path.join(UPLOAD_FOLDER, f"{uuid.uuid4()}.xlsx")

    await bot.download_file(file_path, unique_filename)

    try:
        df = pd.read_excel(unique_filename)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        if not all(col in df.columns for col in ["title", "url", "xpath"]):
            os.remove(unique_filename)  # –£–¥–∞–ª—è–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–∞–π–ª
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞!</b> –í —Ñ–∞–π–ª–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ–ª–æ–Ω–∫–∏:\n"
                "üîπ title (–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞)\n"
                "üîπ url (—Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä)\n"
                "üîπ xpath (–ø—É—Ç—å –∫ —Ü–µ–Ω–µ)\n\n"
                "üìÑ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–Ω–æ–≤–∞.", 
                parse_mode="HTML"
            )
            return  # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞

        # –ï—Å–ª–∏ —Ñ–∞–π–ª –≤–∞–ª–∏–¥–Ω—ã–π, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        prices = []
        for _, row in df.iterrows():
            price = fetch_price(row["url"], row["xpath"])
            prices.append(price)

        # –û–∫—Ä—É–≥–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –¥–æ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤
        avg_price = round(sum(prices) / len(prices), 2) if prices else 0.0

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É —Å —Ü–µ–Ω–∞–º–∏
        df["extracted_price"] = prices

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
        df_text = ""
        for _, row in df.iterrows():
            df_text += f"üìå <b>{row['title']}</b>\n"
            df_text += f"üîó <a href='{row['url']}'>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä</a>\n"
            df_text += f"üí∞ –¶–µ–Ω–∞: <b>{row['extracted_price']} ‚ÇΩ</b>\n\n"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
        conn = connect_db()
        cursor = conn.cursor()
        for _, row in df.iterrows():
            cursor.execute("INSERT INTO items (title, url, xpath) VALUES (?, ?, ?)", (row["title"], row["url"], row["xpath"]))
        conn.commit()
        conn.close()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        response_text = (
            f"‚úÖ <b>–§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>\n"
            f"üìä <i>–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_price} ‚ÇΩ</i>\n\n"
            f"{df_text}"
        )

        await message.answer(response_text, parse_mode="HTML")

    except Exception:
        os.remove(unique_filename)  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
        await message.answer("‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞!</b> –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", parse_mode="HTML")

def fetch_price(url, xpath):
    """–§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–µ–Ω—ã"""
    options = Options()
    options.add_argument("--headless")
    service = Service("/opt/homebrew/bin/chromedriver")
    driver = webdriver.Chrome(service=service, options=options)
    driver.get(url)
    
    try:
        element = driver.find_element(By.XPATH, xpath)
        price_text = element.text

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ (—Å –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ —Ç–æ—á–∫–æ–π)
        price_match = re.search(r'\d+[\.,]?\d*', price_text.replace(' ', ''))
        price = float(price_match.group()) if price_match else 0.0
    except Exception:
        price = 0.0
    finally:
        driver.quit()
    return price

dp.include_router(router)

dp.run_polling(bot)
